name: Java CI with Gradle

on:
  push:
    branches:
      - main

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'zulu'
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew build
      - name: Docker build
        run: |
          docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_PASSWORD }}
          docker build -t project1 . 
          docker tag project1 jwhong123123/project1:${GITHUB_SHA::7}
          docker push jwhong123123/project1:${GITHUB_SHA::7}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
      - name: Start Session Manager session
        run: aws ssm start-session --target i-09cfd0a31e1d528dc
      - name: Deploy to Server
        run: |
          aws ssm send-command \
            --instance-ids i-09cfd0a31e1d528dc \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=[
              'if sudo docker ps -a --format \\'{{.Names}}\\' | grep -q \'^server$\\'; then',
              '  sudo docker stop server',
              '  sudo docker rm server',
              'fi',
              'sudo docker pull jwhong123123/project1:${GITHUB_SHA::7}',
              'sudo docker tag jwhong123123/project1:${GITHUB_SHA::7} jw',
              'sudo docker run -d ',
              ' -e S3_ACCESS_KEY=$S3_ACCESS_KEY',
              ' -e S3_SECRET_KEY=$S3_SECRET_KEY',
              ' -e MYSQL_URL=$MYSQL_URL \\',
              ' -e MYSQL_PASSWORD=$MYSQL_PASSWORD',
              ' -e MYSQL_MASTER=$MYSQL_MASTER',
              ' -e SECRET_KEY=$SECRET_KEY',
              '--name server -p 8080:8080 jw'
            ]" \
            --output text
        env:
          S3_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          S3_SECRET_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          MYSQL_URL: ${{ secrets.mysql_url }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_MASTER: ${{ secrets.MYSQL_MASTER }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}